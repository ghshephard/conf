bind-key V display-message 'Oct 20, 2019'
# MARK March 3rd
# I prefer Control-S my Tmux prefix Key - Leaves Ctr-A alone, and S is close to shift lock on home row.
unbind C-b
set-option -g prefix C-s

# I have vi in my DNA.  Following command ensures that copy-mode is all vi.
# Not entirely sure this is needed, as I think it's the default in later versions of tmux
set-window-option -g mode-keys vi
set -g status-keys vi


# Nice to have a "Capture Screen" Key - use something simliar to OS X CMd-Shift-4 - option-4
bind-key -n M-4 capture-pane\; display-message "Captured Screen to Buffer"

# Don't want to lose window history when we exit window.  option-x to kill the pane for real.
set -g remain-on-exit on
bind-key -n M-'x' kill-pane

# I use command-prompt a lot - make it easiy accsssible.
# unbind-key -n M-';'  (Note \; is needed because ";" is interpreted by tmux.
bind-key -n M-';' command-prompt


# Want to give myself a few seconds before I enter the number for the pane.

set-option -g display-panes-time 3000

# Set the default terminal mode to 256color mode.  Makes coloring look better.
# Make sure that you set terminal type in iTerm to be xterm-256 as well.
set -g default-terminal "screen-256color"

# Make it obvious which is the active window in the status line - red stands out.
set-window-option -g window-status-current-style bg=red

# Tweak the border style of the Active pane to make it stand out.
setw -g pane-border-style fg=green,bg=black
setw -g pane-active-border-style fg=black,bg=yellow

# Make sure the active pane is highly visible (white on black is the default)
setw -g window-active-style fg=white,bg=black

# And make it obvious which ones are in the background.
setw -g window-style fg=green,bg=colour236


# Use the good old VI Keys to move between panes and resize Panes
# "r" allows them to repeat.

bind -n M-h select-pane -L
bind -n M-j select-pane -D
bind -n M-k select-pane -U
bind -n M-l select-pane -R

bind -nr M-H resize-pane -L 5
bind -nr M-J resize-pane -D 5
bind -nr M-K resize-pane -U 5
bind -nr M-L resize-pane -R 5



# This is what lets us use pbcopy/pbpaste in OS X 10.8 (and others) - basically lets us talk to the parent clipboard.
# set-option -g default-command "reattach-to-user-namespace -l bash"
# set-option -g default-command bash
# setw -g monitor-activity on


# As of Tmux 2.1 - all mouse is enabled with "mouse" option.
# Experimenting with forcing myself to use keyboard by disabing mouse support.
set -g mouse off


# really, why not just Meta-[ for scroll back - any need for prefix?  I thought not.
#bind-key -n M-'[' copy-mode 

# Need to force myself to switch over to M-[ - Also avoid the mistake I make
# Of mistaking "scrollback" and "Paste last buffer"

#unbind-key [

# Set this to speed up commands to go into Scroll back, like Meta-[
set-option -g escape-time 100

#Hot Key to zoom / unzoom screen.
bind-key -n  M-'z' resize-pane -Z\; display-message "Rapid Zoom"

# Super Common activity - switching between windows - map it to something
# Super easy like ALt-n for next window and Alt-p for previous window.
bind-key -n M-'n' next-window
bind-key -n M-'p' previous-window


# o goes right, only seems reasonable that O goes Left
bind-key O select-pane -t :.-
bind-key -n M-'O' select-pane -t :.-
bind-key -n M-'o' select-pane -t :.+
unbind-key -n C-'['
unbind-key -n C-']'


# I want a super fast way to paste my buffer - faster than Ctl-S Shift-] - figure 
# Alt-Enter is pretty good. 
bind-key -n M-Enter paste-buffer

# WHo *doesn't* want a big history.
# Admittedly, it does mean that gwnccd really slows down Resurrect Save, because there is so much crud.
# Honestly - Do I really need to run gwncccd in verbose background mode?  When was the last time I even looked at it...
set-option -g history-limit 60000


# Incremental search backwards.  When you get to what you want, hit Enter, and then the n or N key
# to jump back and forth between instances.
bind-key -T copy-mode-vi r command-prompt -i -p "search up" "send -X search-backward-incremental \"%%%\""



# When I hit enter - I want to copy into system buffer
# This behavior changed in 2.4 - the whole "mode-key-tables" thing went away (along with -t)
# So, now everything is in the copy-mode-vi Table.  Fair enough.
unbind-key -T copy-mode-vi  Enter

# Here, we are saying, "When you are in vi copy mode, and someone hits the enter key,
# Copy whatever is selected into the Clipboard with pbcopy command line utility.
# The real magic here is the "-X" flag which instructs send-keys that whats following is
# not actual keys, but a command.  Why they didn't create a "send-command" is beyond me...
# We use pbcopy with OS-X
# bind-key -T copy-mode-vi Enter send-keys -X copy-pipe-and-cancel "reattach-to-user-namespace pbcopy"

# We use xclip with Linux
#bind-key -T copy-mode-vi Enter send-keys -X copy-pipe-and-cancel "xclip -sel clip -i"

# if-shell executes the FIRST command if awk exits with 0 (the default).  Awkward, but essentially,
# if Microsoft is in the line, we exit with 1 and execute the SECOND command.  Wish I could test for Linux without a negative

if-shell "uname -r | awk '$0 ~ /[Mm]icrosoft/{exit 1}'"\
 'bind-key -T copy-mode-vi Enter send-keys -X copy-pipe-and-cancel "xclip -sel clip -i"\; display-message "Linux Copy"'\
 'bind-key -T copy-mode-vi Enter send-keys -X copy-pipe-and-cancel "/mnt/c/Windows/System32/clip.exe"\; display-message "WSL Copy-2"'

# I want ' to do a copy-selection (replace the buffer) *without cancel* -

if-shell "uname -r | awk '$0 ~ /[Mm]icrosoft/{exit 1}'"\
 'bind-key -T copy-mode-vi "," send -X copy-pipe "xclip -sel clip -i"\; send -X clear-selection; display-message "Lnux ccopy"'\
 'bind-key -T copy-mode-vi "," send -X copy-pipe "/mnt/c/Windows/System32/clip.exe"\; send -X clear-selection\; display-message "WSL copy"'

bind-key -T copy-mode-vi "'" send -X copy-pipe "xclip -selection clipboard -i" \; send -X clear-selection


if-shell "uname -s | awk '/Darwin/{exit 0}{exit 1}'"\
 'bind-key -T copy-mode-vi Enter send-keys -X copy-pipe-and-cancel "reattach-to-user-namespace pbcopy"\; display-message "OSX Copy"'


if-shell "uname -s | awk '/Darwin/{exit 0}{exit 1}'"\
 'unbind-key -T copy-mode-vi J;\
 bind-key -T copy-mode-vi J send-keys -X copy-pipe "reattach-to-user-namespace pbcopy"\; send-keys -X clear-selection\; display-message "OSX  NEW"'
 



bind-key C run 'tmux save-buffer - | /mnt/c/Windows/System32/clip.exe'\; display-message "Buffer Save to WSL"
# while we are at it - let's tweak a couple VI copy commands.
# I want "a" to activate the "append without cancel"

bind-key -T copy-mode-vi a send-keys -X append-selection

# I want ' to do a copy-selection (replace the buffer) *without cancel* -

bind-key -T copy-mode-vi "'" send -X copy-pipe "xclip -selection clipboard -i" \; send -X clear-selection

#bind-key -T copy-mode-vi "'" send-keys -X copy-selection

#Okay - my first really imaginative new command with tmux - I want to use Ctrl-S+u to prompt me for a new
#Window name *before* is create the window so it starts out with the correct HISTSFILE name from the .bashrc
bind-key u command-prompt -p "WinName: " "neww -n %1"

# My first multi-command, with %%% and command prompt
bind-key -T copy-mode-vi p command-prompt -p "Buffer" "send-keys -X copy-selection; set-buffer -n \"%%%\"; "

# Track Pad scroll mode - Switch to copy mode, or, alternatively, scroll up when mouse/trackpad up.
# Only relevant if the mouse support is being used.    See set -g mouse off/on
bind -n WheelUpPane if-shell -F -t = "#{mouse_any_flag}" "send-keys -M" "if -Ft= '#{pane_in_mode}' 'send-keys -M' 'select-pane -t=; copy-mode -e; send-keys -M'"

# Okay, we are going all in on the keyboard here.  I like C-u as a good "Go Up" - but
# I hate having to go into scroll back modem with Prefix+[.
# Following checks to see if "alternate_on" is set, if so, (man page) then just send the u
# key to up half a page in the man page.  Otherwise, Switch to copy mode, and then send
# a commnand to copy-mode to go up half a page.  After this, the mode-copy-vi keys will
# be used, and *not* this command.

bind -n C-u  if-shell -Ft= "#{alternate_on}" "send u" "copy-mode -e; send -X halfpage-up;  "

# Following are mouse support commands for VI.  Only relevant if mouse support is enabled.
bind -n WheelDownPane select-pane -t= \; send-keys -M
bind -n C-WheelUpPane select-pane -t= \; copy-mode -e \; send-keys -M
bind -T copy-mode-vi WheelUpPane   send-keys -X halfpage-up
bind -T copy-mode WheelDownPane send-keys -X halfpage-down

# Needed this line to let iTerm do CMD-Key paste, or keys were ignored.
set -g assume-paste-time 0

# Handy shortcut to clear tmux buffer.
bind-key -n C-k clear-history

# Awesome new feature in tmux 23 - ability to display text in the pane borders.
# Super useful, as I want to know what the Pane Number is for pane move/copy commands.
# Also useful for getting a sense of how much is in the scroll back buffer.

set -g pane-border-format '#{pane_id} sc:[#{history_size}]'
set -g pane-border-status bottom

# set -g status-right '#{window_id}.#{pane_id} #{pane_tty}'
# bind-key H pipe-pane  'cat >>$HOME/tmux-#W.log' \; display-message 'logging to $HOME/tmux-#W.log'
# bind-key h pipe-pane \; display-message 'Ended logging to $HOME/tmux-#W.log'


# force a reload of the config file
 unbind r
 bind-key r source-file ~/.tmux.conf\; display-message "Source File ./tmux.conf Read!"

# TMUX PLUGIN MANAGER STUFF HERE
# List of plugins

# Logging is a life saver when you need it - Prefix+P to start, prefix+P to end.
# Particularly useful when you want to dump a long 500K+ line mongo query that
# Will overload your scrollback buffer.



# tmux-ressurrect is pretty awesome - allows me to save/restore all my pane contents.

#List of plugins
 set -g @tpm_plugins "          \
 tmux-plugins/tpm             \
 tmux-plugins/tmux-sensible   \
 tmux-plugins/tmux-resurrect  \
 tmux-plugins/tmux-continuum \
 tmux-plugins/tmux-logging"


# Capture the Pane *contents* as well as layouts.  This is the literally
# 90+% of the reason I love tmux in a single line.
set -g @resurrect-capture-pane-contents 'on' 
 

# Every hour take a snapshot - you can do this manually with Prefix C-S 
set -g @continuum-save-interval '60'

# Automatically Restore Session.
set -g @continuum-restore 'on'

# This is wizardry if it really works
set -g @resurrect-strategy-vim 'session'

# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run '~/.tmux/plugins/tpm/tpm'
